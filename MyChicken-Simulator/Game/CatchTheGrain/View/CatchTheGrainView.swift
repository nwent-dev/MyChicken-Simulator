import SwiftUI
import SpriteKit

/// ‚ö° –ö–ª–∞—Å—Å —Å—Ü–µ–Ω—ã –∏–≥—Ä—ã
class GameScene: SKScene, SKPhysicsContactDelegate {
    private var player: SKSpriteNode!
    private var scoreLabel: SKLabelNode!
    private var score = 0
    
    override func didMove(to view: SKView) {
        physicsWorld.contactDelegate = self
        backgroundColor = .white
        
        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (–∫—É—Ä–∏—Ü—É)
        player = SKSpriteNode(imageNamed: "chicken") // üëà –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        player.position = CGPoint(x: size.width / 2, y: size.height*0.1)
        player.setScale(0.35)
        player.physicsBody = SKPhysicsBody(rectangleOf: player.size)
        player.physicsBody?.isDynamic = false
        player.physicsBody?.categoryBitMask = 1
        player.physicsBody?.contactTestBitMask = 2
        player.physicsBody?.collisionBitMask = 0
        addChild(player)
        
        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        scoreLabel = SKLabelNode(fontNamed: "AvenirNext-Bold")
        scoreLabel.position = CGPoint(x: size.width / 2, y: size.height - 50)
        scoreLabel.fontSize = 24
        scoreLabel.fontColor = .black
        scoreLabel.text = "Score: \(score)"
        addChild(scoreLabel)
        
        // üîπ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        let spawn = SKAction.run { [weak self] in
            self?.spawnFallingItem()
        }
        let wait = SKAction.wait(forDuration: 1.0)
        let sequence = SKAction.sequence([spawn, wait])
        run(SKAction.repeatForever(sequence))
    }
    
    /// üèÜ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç
    private func spawnFallingItem() {
        let item = SKSpriteNode(imageNamed: "dropItem") // üëà –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        let randomX = CGFloat.random(in: 50...(size.width - 50))
        item.position = CGPoint(x: randomX, y: size.height)
        item.setScale(0.5)
        
        item.physicsBody = SKPhysicsBody(rectangleOf: item.size)
        item.physicsBody?.categoryBitMask = 2
        item.physicsBody?.contactTestBitMask = 1
        item.physicsBody?.collisionBitMask = 0
        item.physicsBody?.affectedByGravity = true
        item.physicsBody?.velocity = CGVector(dx: 0, dy: -200)
        
        addChild(item)
    }
    
    /// üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é (—Ç–æ–ª—å–∫–æ –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç)
    func didBegin(_ contact: SKPhysicsContact) {
        var fallingItem: SKSpriteNode?
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–¥–∞—é—â–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
        if contact.bodyA.categoryBitMask == 2 {
            fallingItem = contact.bodyA.node as? SKSpriteNode
        } else if contact.bodyB.categoryBitMask == 2 {
            fallingItem = contact.bodyB.node as? SKSpriteNode
        }
        
        // –£–¥–∞–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç
        if let fallingItem = fallingItem {
            fallingItem.removeFromParent()
            increaseScore()
        }
    }
    
    /// üéØ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
    private func increaseScore() {
        score += 1
        scoreLabel.text = "Score: \(score)"
    }
    
    /// üéÆ –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
    func movePlayer(to position: CGPoint) {
        let newX = max(50, min(size.width - 50, position.x))
        player.position.x = newX
    }
}

/// üéÆ SwiftUI View –¥–ª—è –∏–≥—Ä—ã
struct Game2View: View {
    @State private var scene = GameScene(size: CGSize(width: 400, height: 800))
    
    var body: some View {
        ZStack {
            SpriteView(scene: scene)
                .ignoresSafeArea()
                .gesture(
                    DragGesture()
                        .onChanged { value in
                            scene.movePlayer(to: value.location)
                        }
                )
        }
    }
}

/// ‚úÖ –ü—Ä–µ–≤—å—é
#Preview {
    Game2View()
}

import SwiftUI
import SpriteKit

/// ‚ö° –ö–ª–∞—Å—Å —Å—Ü–µ–Ω—ã –∏–≥—Ä—ã
class CatchTheGrainScene: SKScene, SKPhysicsContactDelegate {
    private var player: SKSpriteNode!
    private var background: SKSpriteNode!
    private var gameViewModel: CatchTheGrainViewModel? // –°—Å—ã–ª–∫–∞ –Ω–∞ ViewModel
    private var spawnAction: SKAction? // –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    /// üéÆ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ViewModel (–≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω—ã)
    func setViewModel(_ viewModel: CatchTheGrainViewModel) {
        self.gameViewModel = viewModel
    }
    
    override func didMove(to view: SKView) {
        physicsWorld.contactDelegate = self
        
        // üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        view.backgroundColor = .clear
        
        // üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω (–∫–∞—Ä—Ç–∏–Ω–∫—É `bg2.png`)
        background = SKSpriteNode(imageNamed: "bg2.png")
        background.position = CGPoint(x: size.width / 2, y: size.height / 2)
        background.size = size // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        background.zPosition = -1 // –§–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∑–∞–¥–∏ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        addChild(background)

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (–∫—É—Ä–∏—Ü—É)
        player = SKSpriteNode(imageNamed: "chicken")
        player.position = CGPoint(x: size.width / 2, y: size.height * 0.1)
        player.setScale(0.33)
        player.physicsBody = SKPhysicsBody(rectangleOf: player.size)
        player.physicsBody?.isDynamic = false
        player.physicsBody?.categoryBitMask = 1
        player.physicsBody?.contactTestBitMask = 2
        player.physicsBody?.collisionBitMask = 0
        addChild(player)
        
        // üîπ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        spawnAction = SKAction.sequence([
            SKAction.run { [weak self] in self?.spawnFallingItem() },
            SKAction.wait(forDuration: 1.0)
        ])
        run(SKAction.repeatForever(spawnAction!), withKey: "spawnItems")
    }
    
    /// üèÜ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–¥–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç
    private func spawnFallingItem() {
        guard !(gameViewModel?.isGamePaused ?? false) else { return } // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–≤–Ω –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
        
        let item = SKSpriteNode(imageNamed: "dropItem")
        let randomX = CGFloat.random(in: 50...(size.width - 50))
        item.position = CGPoint(x: randomX, y: size.height)
        item.setScale(0.6)
        
        item.physicsBody = SKPhysicsBody(rectangleOf: item.size)
        item.physicsBody?.categoryBitMask = 2
        item.physicsBody?.contactTestBitMask = 1
        item.physicsBody?.collisionBitMask = 0
        item.physicsBody?.affectedByGravity = true
        item.physicsBody?.velocity = CGVector(dx: 0, dy: -200)
        
        addChild(item)
    }
    
    /// üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é (—Ç–æ–ª—å–∫–æ –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç)
    func didBegin(_ contact: SKPhysicsContact) {
        guard !(gameViewModel?.isGamePaused ?? false) else { return } // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        var fallingItem: SKSpriteNode?
        
        if contact.bodyA.categoryBitMask == 2 {
            fallingItem = contact.bodyA.node as? SKSpriteNode
        } else if contact.bodyB.categoryBitMask == 2 {
            fallingItem = contact.bodyB.node as? SKSpriteNode
        }
        
        if let fallingItem = fallingItem {
            fallingItem.removeFromParent()
            increaseScore()
        }
    }
    
    /// üéØ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ `CatchTheGrainViewModel`
    private func increaseScore() {
        gameViewModel?.increaseScore() // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º ViewModel
    }
    
    /// üéÆ –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏), –Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
    func movePlayer(to position: CGPoint) {
        guard !(gameViewModel?.isGamePaused ?? false) else { return }
        
        let newX = max(50, min(size.width - 50, position.x))
        player.position.x = newX
    }
    
    /// ‚è∏ –ü–∞—É–∑–∞ –∏–≥—Ä—ã (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∞–≤–Ω –∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã)
    func pauseGame() {
        isPaused = true
        removeAction(forKey: "spawnItems") // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–≤–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        children.forEach { node in
            node.isPaused = true
        }
    }
    
    /// ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
    func resumeGame() {
        isPaused = false
        run(SKAction.repeatForever(spawnAction!), withKey: "spawnItems") // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∞–≤–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        // –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤—Å–µ –ø–∞–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        children.forEach { node in
            node.isPaused = false
        }
    }
}
